{
	"info": {
		"_postman_id": "d7e3355b-8480-43d9-87a2-9bbfc158f267",
		"name": "experimentation-platform",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create Experiment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const host = pm.environment.get(\"host\");",
							"const token = pm.environment.get(\"token\");",
							"",
							"",
							"function fetch_context_n_test(context_id, expected_override_id, expected_override, expected_variant_context) {",
							"    const getRequest = {",
							"        url: `${host}/context/${context_id}`,",
							"        method: 'GET',",
							"        header: {",
							"            'Content-Type': 'application/json',",
							"        }",
							"    };",
							"",
							"    ",
							"    pm.sendRequest(getRequest, (error, response) => {",
							"        if(error) {",
							"            console.log(\"Failed to fetch context\");",
							"            throw error;",
							"        }",
							"",
							"        const context = response.json();",
							"",
							"        /*********** checking contexts created in CAC **********/;",
							"        ",
							"",
							"        const variant_override_id = context.override_id;",
							"        const varaint_context = context.value;",
							"        const variant_override = context.override;",
							"",
							"        console.log(\"Testing variant override id\");",
							"        console.log(\"Override from CAC: \\n\", variant_override_id);",
							"        console.log(\"Expected Context: \\n\", expected_override_id);",
							"        pm.expect(variant_override_id).to.be.eq(expected_override_id);",
							"",
							"        console.log(\"Testing variant override\");",
							"        console.log(\"Override from CAC: \\n\", JSON.stringify(variant_override, null, 2));",
							"        console.log(\"Expected Context: \\n\", JSON.stringify(expected_override, null, 2));",
							"        pm.expect(JSON.stringify(variant_override)).to.be.eq(JSON.stringify(expected_override));",
							"",
							"        console.log(\"Testing variant context\");",
							"        console.log(\"Context from CAC: \\n\", JSON.stringify(varaint_context, null, 2));",
							"        console.log(\"Expected Context: \\n\", JSON.stringify(expected_variant_context, null, 2));",
							"        pm.expect(JSON.stringify(varaint_context)).to.be.eq(JSON.stringify(expected_variant_context));",
							"    });",
							"}",
							"",
							"function fetch_experiment_n_test(experiment_id, expected_context, expected_varaints, expected_variant_contexts) {",
							"    const options = {",
							"        'method': 'GET',",
							"        'url': `${host}/experiments/${experiment_id}`,",
							"        \"header\": {",
							"            'Authorization': `Bearer ${token}`,",
							"            'Content-Type': 'application/json'",
							"        }",
							"    };",
							"",
							"    pm.sendRequest(options, function(error, response) {",
							"        if(error) {",
							"            console.log(\"Failed to fetch experiment\");",
							"            throw error;",
							"        }",
							"        ",
							"        const experiment = response.json();",
							"",
							"        const context = experiment.context;",
							"        console.log(\"Testing Context of Experiment\");",
							"        console.log(`Expected: ${JSON.stringify(expected_context, null, 2)}`);",
							"        console.log(`Actual: ${JSON.stringify(context, null, 2)}`);",
							"        pm.expect(JSON.stringify(context)).to.be.eq(JSON.stringify(expected_context));",
							"",
							"        const variants = experiment.variants;",
							"        for(const variant of variants) {",
							"            const variant_id = variant.id;",
							"",
							"            console.log(`TESTING variant: ${variant_id}`);",
							"",
							"            // check if the variant present in the expected_variants",
							"            const variant_cpy = JSON.parse(JSON.stringify(variant));",
							"            delete variant_cpy.override_id;",
							"            delete variant_cpy.context_id;",
							"",
							"            const expected_variant = expected_varaints.find((ev) => ev.id === variant_id);",
							"            console.log(\"Actual Variant:\", JSON.stringify(variant_cpy, null, 4));",
							"            console.log(\"Expected Variant:\", JSON.stringify(expected_variant, null, 4));",
							"            pm.expect(JSON.stringify(variant_cpy)).to.be.eq(JSON.stringify(expected_variant));",
							"",
							"            /*********/",
							"",
							"            const expected_context_id = variant.context_id;",
							"            const expected_override_id = variant.override_id;",
							"            const expected_override = variant.overrides;",
							"            const expected_variant_context = expected_variant_contexts.find(evc => evc.vid === variant_id)?.context;",
							"            ",
							"            fetch_context_n_test(expected_context_id, expected_override_id, expected_override, expected_variant_context);",
							"        }",
							"    });",
							"}",
							"",
							"// check experiment creation in experiment",
							"pm.test(\"200 OK\", function () {",
							"    const response = pm.response.json();",
							"    const experiment_id = response.experiment_id;",
							"    ",
							"    pm.environment.set(\"experiment_id\", experiment_id);",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"// check for contexts in CAC",
							"pm.test(\"Test created contexts\", function() {",
							"    const response = pm.response.json();",
							"    const experiment_id = response.experiment_id;",
							"",
							"",
							"    const expected_context = {",
							"      \"and\": [",
							"        {",
							"          \"==\": [",
							"            {",
							"              \"var\": \"os\"",
							"            },",
							"            \"ios\"",
							"          ]",
							"        },",
							"        {",
							"          \"==\": [",
							"            {",
							"              \"var\": \"client\"",
							"            },",
							"            \"testClientCac1\"",
							"          ]",
							"        }",
							"      ]",
							"    };",
							"    const expected_varaints = [",
							"        {",
							"            \"id\": `${experiment_id}-control`,",
							"            \"overrides\": {",
							"                \"pmTestKey1\": \"value1-control\",",
							"                \"pmTestKey2\": \"value1-control\"",
							"            },",
							"            \"variant_type\": \"CONTROL\"",
							"        },",
							"        {",
							"            \"id\": `${experiment_id}-test1`,",
							"            \"overrides\": {",
							"                \"pmTestKey1\": \"value2-test\",",
							"                \"pmTestKey2\": \"value2-test\"",
							"            },",
							"            \"variant_type\": \"EXPERIMENTAL\"",
							"        }",
							"    ];",
							"    const expected_variant_contexts = [",
							"        {",
							"            \"vid\": `${experiment_id}-control`,",
							"            \"context\": {",
							"                \"and\": [",
							"                    {",
							"                        \"==\": [",
							"                            {",
							"                                \"var\": \"os\"",
							"                            },",
							"                            \"ios\"",
							"                        ]",
							"                    },",
							"                    {",
							"                        \"==\": [",
							"                            {",
							"                                \"var\": \"client\"",
							"                            },",
							"                            \"testClientCac1\"",
							"                        ]",
							"                    },",
							"                    {",
							"                        \"in\": [",
							"                            `${experiment_id}-control`,",
							"                            {",
							"                                \"var\": \"variantIds\"",
							"                            }",
							"                        ]",
							"                    }",
							"                ]",
							"            }",
							"        },",
							"        {",
							"            \"vid\": `${experiment_id}-test1`,",
							"            \"context\": {",
							"                \"and\": [",
							"                    {",
							"                        \"==\": [",
							"                            {",
							"                                \"var\": \"os\"",
							"                            },",
							"                            \"ios\"",
							"                        ]",
							"                    },",
							"                    {",
							"                        \"==\": [",
							"                            {",
							"                                \"var\": \"client\"",
							"                            },",
							"                            \"testClientCac1\"",
							"                        ]",
							"                    },",
							"                    {",
							"                        \"in\": [",
							"                            `${experiment_id}-test1`,",
							"                            {",
							"                                \"var\": \"variantIds\"",
							"                            }",
							"                        ]",
							"                    }",
							"                ]",
							"            }",
							"        }",
							"    ];",
							"",
							"    fetch_experiment_n_test(experiment_id, expected_context, expected_varaints, expected_variant_contexts);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const host = pm.environment.get(\"host\");",
							"const token = pm.environment.get(\"token\");",
							"",
							"function create_default_config_keys() {",
							"    let keys = [",
							"        `pmTestKey1`,",
							"        `pmTestKey2`",
							"    ];",
							"",
							"    for (const key of keys) {",
							"        const options = {",
							"            'method': 'PUT',",
							"            'url': `${host}/default-config/${key}`,",
							"            \"header\": {",
							"                'Authorization': `Bearer ${token}`,",
							"                'Content-Type': 'application/json'",
							"            },",
							"            \"body\": {",
							"                \"mode\": \"raw\",",
							"                \"raw\": JSON.stringify({",
							"                    \"value\": \"value1\",",
							"                    \"schema\": {",
							"                        \"type\": \"string\",",
							"                        \"pattern\": \".*\"",
							"                    }",
							"                })",
							"            }",
							"        };",
							"        console.log(options);",
							"        pm.sendRequest(options, function (error, response) {",
							"            if (error) {",
							"                console.log(`Error creating default-config key: ${key}`);",
							"                console.log(error);",
							"                return;",
							"            };",
							"            console.log(`Created default-config key: ${key}`);",
							"        });",
							"    }",
							"}",
							"",
							"function create_dimensions() {",
							"    const dimensions = [",
							"        {name: \"os\", priority: 10, type: \"STRING\"},",
							"        {name: \"client\", priority: 100, type: \"STRING\"},",
							"        {name: \"variantIds\", priority: 1000, type: \"STRING\"}",
							"    ];",
							"",
							"    for (const dimension of dimensions) {",
							"        const options = {",
							"            'method': 'PUT',",
							"            'url': `${host}/dimension`,",
							"            'header': {",
							"                'Authorization': `Bearer ${token}`,",
							"                'Content-Type': 'application/json'",
							"            },",
							"            \"body\": {",
							"                \"mode\": \"raw\",",
							"                \"raw\": JSON.stringify({",
							"                    \"dimension\": dimension.name,",
							"                    \"priority\": dimension.priority,",
							"                    \"type\": dimension.type",
							"                })",
							"            }",
							"        };",
							"        pm.sendRequest(options, function (error, response) {",
							"            if (error) {",
							"                console.log(`Error creating dimension: ${dimension.name}`);",
							"                console.log(error);",
							"                return;",
							"            }",
							"            console.log(`Created dimension: ${dimension.name}`);",
							"        });",
							"    }",
							"}",
							"",
							"create_default_config_keys();",
							"create_dimensions();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "default"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"experiment-1\",\n    \"override_keys\": [\"pmTestKey1\", \"pmTestKey2\"],\n    \"traffic_percentage\": 10,\n    \"context\": {\n      \"and\": [\n        {\n          \"==\": [\n            {\n              \"var\": \"os\"\n            },\n            \"ios\"\n          ]\n        },\n        {\n          \"==\": [\n            {\n              \"var\": \"client\"\n            },\n            \"testClientCac1\"\n          ]\n        }\n      ]\n    },\n    \"variants\": [\n        {\n            \"id\": \"control\",\n            \"variant_type\": \"CONTROL\",\n            \"overrides\": {\n                \"pmTestKey1\": \"value1-control\",\n                \"pmTestKey2\": \"value1-control\"\n            }\n        },\n        {\n            \"id\": \"test1\",\n            \"variant_type\": \"EXPERIMENTAL\",\n            \"overrides\": {\n                \"pmTestKey1\": \"value2-test\",\n                \"pmTestKey2\": \"value2-test\"\n            }\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/experiments",
					"host": [
						"{{host}}"
					],
					"path": [
						"experiments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Experiment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK\", function() {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/experiments/{{experiment_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"experiments",
						"{{experiment_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ramp",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const host = pm.environment.get(\"host\");",
							"const token = pm.environment.get(\"token\");",
							"",
							"function fetch_experiment_n_test(experiment_id, expected_traffic_percentage) {",
							"    const options = {",
							"        'method': 'GET',",
							"        'url': `${host}/experiments/${experiment_id}`,",
							"        \"header\": {",
							"            'Authorization': `Bearer ${token}`,",
							"            'Content-Type': 'application/json'",
							"        }",
							"    };",
							"",
							"    pm.sendRequest(options, function(error, response) {",
							"        if(error) {",
							"            console.log(\"Failed to fetch experiment\");",
							"            throw error;",
							"        }",
							"        ",
							"        const experiment = response.json();",
							"        console.log(`Expected: ${expected_traffic_percentage}, Actual: ${experiment.traffic_percentage}`);",
							"        pm.expect(experiment.traffic_percentage).to.be.eq(expected_traffic_percentage);",
							"    });",
							"}",
							"",
							"// check experiment creation in experiment",
							"pm.test(\"200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"// check for contexts in CAC",
							"pm.test(\"Test traffic percentage\", function() {",
							"    const experiment_id = pm.environment.get(\"experiment_id\");",
							"",
							"    fetch_experiment_n_test(experiment_id, 46);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "default"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"traffic_percentage\": 46\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/experiments/{{experiment_id}}/ramp",
					"host": [
						"{{host}}"
					],
					"path": [
						"experiments",
						"{{experiment_id}}",
						"ramp"
					]
				}
			},
			"response": []
		},
		{
			"name": "Conclude",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const host = pm.environment.get(\"host\");",
							"const token = pm.environment.get(\"token\");",
							"",
							"const experiment_id = pm.environment.get(\"experiment_id\");",
							"",
							"function fetch_config_n_test(variants, winner_variant_id) {",
							"    const options = {",
							"        'method': 'GET',",
							"        'url': `${host}/config`,",
							"        'header': {",
							"            'Authorization': `Bearer ${token}`,",
							"            'Contet-Type': 'application/json'",
							"        }",
							"    };",
							"",
							"    pm.sendRequest(options, function(error, response) {",
							"        if(error) {",
							"            console.log(\"Failed to fetch config\");",
							"            throw error;",
							"        }",
							"",
							"        const config = response.json();",
							"        const contexts = config.contexts;",
							"        const overrides = config.overrides;",
							"",
							"        const winner_variant = variants.find(variant => variant.id === winner_variant_id);",
							"        const winner_variant_override_id = winner_variant.override_id;",
							"        ",
							"        // there should be only one context with the winner variant override id",
							"        const contexts_with_winner_variant_override = contexts.filter((context) => context.override_with_keys.includes(winner_variant_override_id));",
							"        console.log(\"Context with winner variant override\");",
							"        console.log(JSON.stringify(contexts_with_winner_variant_override, null, 4));",
							"        pm.expect(contexts_with_winner_variant_override.length).to.be.eq(1);",
							"",
							"        // there should be 0 contexts with variant as a dimension",
							"        const contexts_with_variant_dim = contexts",
							"            .filter(",
							"                (context) => ",
							"                    context.condition.and",
							"                        ?.map(",
							"                            (condition) => ",
							"                                Object.keys(condition)",
							"                                    .map((k) => condition[k][0].var === \"variant\")",
							"                                    .reduce((p, c) => p || c, false))",
							"                        .reduce((p, c) => p || c, false)",
							"            );",
							"        pm.expect(contexts_with_variant_dim.length).to.be.eq(0);",
							"",
							"        // checking if winner override exists and is same as the expected override",
							"        const winner_variant_context = contexts_with_winner_variant_override[0]; ",
							"        pm.expect(winner_variant_context.override_with_keys.length).to.be.eq(1);",
							"        pm.expect(JSON.stringify(winner_variant_context.override_with_keys[0])).to.be.eq(JSON.stringify(winner_variant_override_id));",
							"",
							"        // checking if all the discarded overrides are removed",
							"        const discarded_variants = variants.filter(variant => variant.id !== winner_variant_id);",
							"        const discarded_variants_override_ids = discarded_variants.map(dv => dv.override_id);",
							"        const available_overrides = Object.keys(overrides);",
							"        for(const ao of available_overrides) {",
							"            pm.expect(discarded_variants_override_ids).to.not.include(ao);",
							"        }",
							"    });",
							"}",
							"",
							"function fetch_experiment_n_test(experiment_id, winner_variant_id, expected_status) {",
							"    const options = {",
							"        'method': 'GET',",
							"        'url': `${host}/experiments/${experiment_id}`,",
							"        \"header\": {",
							"            'Authorization': `Bearer ${token}`,",
							"            'Content-Type': 'application/json'",
							"        }",
							"    };",
							"",
							"    pm.sendRequest(options, function(error, response) {",
							"        if(error) {",
							"            console.log(\"Failed to fetch experiment\");",
							"            throw error;",
							"        }",
							"        ",
							"        const experiment = response.json();",
							"",
							"        const status = experiment.status;",
							"        pm.expect(status).to.be.eq(expected_status);",
							"",
							"        const variants = experiment.variants;",
							"        fetch_config_n_test(variants, winner_variant_id);",
							"    });",
							"}",
							"",
							"pm.test(\"200 OK\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Conclude correctness\", function() {",
							"    const winner_variant_id = `${experiment_id}-control`;",
							"    fetch_experiment_n_test(experiment_id, winner_variant_id, \"CONCLUDED\")",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"winner_variant\": \"{{experiment_id}}-control\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/experiments/{{experiment_id}}/conclude",
					"host": [
						"{{host}}"
					],
					"path": [
						"experiments",
						"{{experiment_id}}",
						"conclude"
					]
				}
			},
			"response": []
		},
		{
			"name": "List experiments [No If-Modified-Since]",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"url": {
					"raw": "{{host}}/experiments?from_date=2023-01-01%2000%3A00%3A00%20UTC&to_date=2023-08-04%2005%3A52%3A39.889727%20UTC&page=1&count=100&status=CREATED,INPROGRESS",
					"host": [
						"{{host}}"
					],
					"path": [
						"experiments"
					],
					"query": [
						{
							"key": "from_date",
							"value": "2023-01-01%2000%3A00%3A00%20UTC"
						},
						{
							"key": "to_date",
							"value": "2023-08-04%2005%3A52%3A39.889727%20UTC"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "count",
							"value": "100"
						},
						{
							"key": "status",
							"value": "CREATED,INPROGRESS"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List experiments [If-Modified-Since = Thu, 01 Jan 1970 00:00:00 +0000]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 check\", function() {",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					},
					{
						"key": "If-Modified-Since",
						"value": "Thu, 01 Jan 1970 00:00:00 +0000",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{host}}/experiments?page=1&count=100&status=CREATED,INPROGRESS,CONCLUDED",
					"host": [
						"{{host}}"
					],
					"path": [
						"experiments"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "count",
							"value": "100"
						},
						{
							"key": "status",
							"value": "CREATED,INPROGRESS,CONCLUDED"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List experiments [If-Modified-Since = Wed, 01 Dec 2070 00:00:00 +0000]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"304 check\", function() {",
							"    pm.response.to.have.status(304);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					},
					{
						"key": "If-Modified-Since",
						"value": "Wed, 01 Jan 2070 00:00:00 +0000",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{host}}/experiments?page=1&count=100&status=CREATED,INPROGRESS",
					"host": [
						"{{host}}"
					],
					"path": [
						"experiments"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "count",
							"value": "100"
						},
						{
							"key": "status",
							"value": "CREATED,INPROGRESS"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://localhost:8080",
			"type": "default"
		},
		{
			"key": "token",
			"value": "12345678",
			"type": "default"
		}
	]
}